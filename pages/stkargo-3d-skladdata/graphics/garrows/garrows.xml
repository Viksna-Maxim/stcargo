<krpano>

<garrows_settings ver="0.96 | www.robostitcher.com/Garrows" /> <events name="garrowsevents1" keep="true" onxmlcomplete="garrows_init()" onclick="garrowclick();" /> <events name="garrowsevents2" keep="true" devices="desktop" onkeydown=" if(keycode == 38 OR keycode == 40 OR keycode == 37 OR keycode == 39, stopdelayedcall(enablewobbling); stoptween(view.vlookat, view.hlookat); if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, false);); ); " onkeyup=" delayedcall(enablewobbling, 1, if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, true););); if(garrows_settings.keyboard_control AND keycode == 32 AND hsnear, garrowclick();); if(garrows_settings.hotkey_f AND keycode == 70, if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, false);); set(hlk, get(view.hlookat)); sub(hlk, 180); tween(view.hlookat, get(hlk), 1, default, if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, true););); ); if(garrows_settings.hotkey_f AND keycode == 68, if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, false);); set(hlk, get(view.hlookat)); sub(hlk, 90); tween(view.hlookat,get(hlk),0.5, default, if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, true););); ); if(garrows_settings.hotkey_f AND keycode == 71, if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, false);); set(hlk, get(view.hlookat)); sub(hlk, -90); tween(view.hlookat,get(hlk),0.5, default, if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, true););); ); " /> <events name="garrowsevents3" keep="true" onmousedown="stopdelayedcall(mousepressedcall); set(garrows_settings.mousepressed, true);" onmouseup=" delayedcall(mousepressedcall, calc(garrows_settings.scenes_wobbling_time/1000), set(garrows_settings.mousepressed, false)); if(garrows_settings.scenes_wobbling_stopondrag, set(garrows_settings.scenes_wobbling_global, false); ); " onxmlcomplete="if(garrows_settings.scenes_wobbling_global, set(garrows_settings.scenes_wobbling, true); if(glinks_settings.glinks_enable, delayedcall(3, panomovement());, panomovement();););" /> <action name="garrows_init"> if(garrows_settings.logkey_enable, set(logkey,true);); if(garrows_settings.allhotspotshidden===null, set(garrows_settings.allhotspotshidden, false);); if(garrows_settings.autorotateon===null, set(garrows_settings.autorotateon, false);); if(garrows_settings.password_protect AND pass != garrows_settings.password, checkpassword();); if(device.desktop, div(garrows_settings.chevrons_updatedelay, garrows_settings.chevrons_updatedelay_desktop, 1000); set(garrows_settings.show_floatingarrow, get(garrows_settings.show_floatingarrow_d)); set(garrows_settings.show_chevrons, get(garrows_settings.show_chevrons_d)); set(garrows_settings.show_navpoints, get(garrows_settings.show_navpoints_d)); set(garrows_settings.show_contextmenu, get(garrows_settings.show_contextmenu_d)); set(garrows_settings.show_originalhotspots, get(garrows_settings.show_originalhotspots_d)); set(garrows_settings.floatingarrow_position, get(garrows_settings.floatingarrow_position_d)); set(garrows_settings.floatingarrow_scale, get(garrows_settings.floatingarrow_scale_d)); set(garrows_settings.chevron_style, get(garrows_settings.chevrons_style_d)); , div(garrows_settings.chevrons_updatedelay, garrows_settings.chevrons_updatedelay_mobile, 1000); set(garrows_settings.show_floatingarrow, get(garrows_settings.show_floatingarrow_m)); set(garrows_settings.show_chevrons, get(garrows_settings.show_chevrons_m)); set(garrows_settings.show_navpoints, get(garrows_settings.show_navpoints_m)); set(garrows_settings.show_contextmenu, get(garrows_settings.show_contextmenu_m)); set(garrows_settings.show_originalhotspots, get(garrows_settings.show_originalhotspots_m)); set(garrows_settings.floatingarrow_position, get(garrows_settings.floatingarrow_position_m)); set(garrows_settings.floatingarrow_scale, get(garrows_settings.floatingarrow_scale_m)); set(garrows_settings.chevron_style, get(garrows_settings.chevrons_style_m)); ); if(plugin[webvr] !== null, set(garrows_settings.show_floatingarrow, get(garrows_settings.show_floatingarrow_vr)); set(garrows_settings.show_chevrons, get(garrows_settings.show_chevrons_vr)); set(garrows_settings.show_navpoints, get(garrows_settings.show_navpoints_vr)); set(garrows_settings.show_contextmenu, get(garrows_settings.show_contextmenu_vr)); set(garrows_settings.show_originalhotspots, get(garrows_settings.show_originalhotspots_vr)); set(garrows_settings.floatingarrow_position, get(garrows_settings.floatingarrow_position_vr)); set(garrows_settings.scenes_wobbling, false); ); if(garrows_settings.keep_view, set(action[mainloadscene].content, "if (xml.scene != %"); txtadd(action[mainloadscene].content, "1, interruptAnimation(); loadscene(%"); txtadd(action[mainloadscene].content, "1, get(projection_current_params), KEEPVIEW, get(ptblendmode)););" )); ifnot(garrows_settings.ignore_showhidehotspots, txtadd(action[hidepanopointspots].content, ' set(garrows_settings.allhotspotshidden, true); if(garrows_settings.show_floatingarrow_global, set(garrows_settings.show_floatingarrow, false); hidefloatingarrow();); if(garrows_settings.show_chevrons_global, set(garrows_settings.show_chevrons, false); removechevrons();); if(garrows_settings.show_navpoints_global, set(garrows_settings.show_navpoints, false); hidenavpoints();); '); txtadd(action[showpanopointspots].content, ' set(garrows_settings.allhotspotshidden, false); if(garrows_settings.show_floatingarrow_global, set(garrows_settings.show_floatingarrow, true); mousemove();); if(garrows_settings.show_chevrons_global, set(garrows_settings.show_chevrons, true); addchevrons();); if(garrows_settings.show_navpoints_global, set(garrows_settings.show_navpoints, true); shownavpoints();); '); ); if(garrows_settings.scenes_wobbling_global===null, set(garrows_settings.scenes_wobbling_global, get(garrows_settings.scenes_wobbling));); if(garrows_settings.show_floatingarrow_global===null, set(garrows_settings.show_floatingarrow_global, get(garrows_settings.show_floatingarrow));); if(garrows_settings.show_chevrons_global===null, set(garrows_settings.show_chevrons_global, get(garrows_settings.show_chevrons));); if(garrows_settings.show_navpoints_global===null, set(garrows_settings.show_navpoints_global, get(garrows_settings.show_navpoints));); delayedcall(get(garrows_settings.startup_delay), for(set(i,get(hotspot.count)), i GE 0 , dec(i), copy(hs,hotspot[get(i)]); if (hs.style == garrows_settings.navhotspots_style OR hs.style == garrows_settings.navhotspots_style_vertical, txtadd(hs.onclick, 'set(garrows_settings.scenes_wobbling, false); ', get(hs.onclick)); set(newhsname, get(hs.name)); txtadd(newhsname, '-navpoint'); addhotspot(get(newhsname)); set(hotspot[get(newhsname)].ath, get(hs.ath)); set(hotspot[get(newhsname)].atv, get(hs.atv)); if(hs.style == garrows_settings.navhotspots_style_vertical, set(hotspot[get(newhsname)].vdir, get(hs.atv));); txtadd(hotspot[get(newhsname)].onclick, 'tween(scale,0,0.2); ', 'tween(oy,20,0.2); ', 'delayedcall(0.2, ', get(hs.onclick), '); '); hotspot[get(newhsname)].loadstyle('skin_hotspotstyle_navigate'); set(hotspot[get(newhsname)].onhoverorig0, get(hs.onhover)); set(hotspot[get(newhsname)].onoutorig0, get(hs.onout)); txtadd(hotspot[get(newhsname)].onhoverorig, 'hidefloatingarrow(); ', get(hs.onhover)); txtadd(hotspot[get(newhsname)].onoutorig, 'if(garrows_settings.show_floatingarrow, mousemove();); ', get(hs.onout)); txtadd(hotspot[get(newhsname)].onhover, 'hidefloatingarrow(); if(enabled, tween(alpha,get(garrows_settings.navpoints_onhover_alpha),0.5);); ', get(hs.onhover)); txtadd(hotspot[get(newhsname)].onout, 'if(garrows_settings.show_floatingarrow, mousemove();); if(enabled, tween(alpha,get(garrows_settings.navpoints_alpha),0.5);); ', get(hs.onout)); if(garrows_settings.show_tooltips, set(hotspot[get(newhsname)].tooltip, get(hs.tooltip));); ifnot(garrows_settings.show_originalhotspots, removehotspot(get(hs.name));); ); ); if(garrows_settings.show_chevrons_global, addchevrons();); if(garrows_settings.show_floatingarrow_global, mousemove();); if(garrows_settings.show_contextmenu, showcontextmenu();); if(garrows_settings.show_navpoints_global, shownavpoints();); set(garrows_settings.startup_delay, 0); indexoftxt(disabledpano, get(garrows_settings.disabled_panoids), get(xml.scene)); if(disabledpano != -1, hidefloatingarrow(); hidenavpoints(); removechevrons(); ); ); </action> <action name="checkpassword"> js(passwordplease()); if(pass != garrows_settings.password, set(layer[wrongpassword].visible,true), set(layer[wrongpassword].visible,false)); </action> <action name="panomovement"> if (garrows_settings.scenes_wobbling, copy(mx, mouse.x); copy(my, mouse.y); if(mx == 0 AND my == 0, set(mx, calc(stagewidth/2)); set(my, calc(stageheight/2)); ); if (hlookmax === null OR vlookmax === null OR hlookmin === null OR vlookmin === null OR view.hlookat GT hlookmax OR view.hlookat LT hlookmin OR view.vlookat GT vlookmax OR view.vlookat LT vlookmin, panomovementminmaxvalues() ); ifnot (garrows_settings.mousepressed OR garrows_settings.autorotateon, if (mx LT calc(stagewidth*1/2), tween(view.hlookat, calc(hlookmin+garrows_settings.scenes_wobbling_size/2-(stagewidth/2 - mouse.x)*garrows_settings.scenes_wobbling_size/stagewidth), calc(garrows_settings.scenes_wobbling_time/1000))); if (mx GT calc(stagewidth*1/2), tween(view.hlookat, calc(hlookmax-garrows_settings.scenes_wobbling_size/2-(stagewidth/2 - mouse.x)*garrows_settings.scenes_wobbling_size/stagewidth), calc(garrows_settings.scenes_wobbling_time/1000))); if (my LT calc(stageheight*1/2), tween(view.vlookat, calc(vlookmin+garrows_settings.scenes_wobbling_size/2-(stageheight/2 - mouse.y)*garrows_settings.scenes_wobbling_size/stageheight), calc(garrows_settings.scenes_wobbling_time/1000))); if (my GT calc(stageheight*1/2), tween(view.vlookat, calc(vlookmax-garrows_settings.scenes_wobbling_size/2-(stageheight/2 - mouse.y)*garrows_settings.scenes_wobbling_size/stageheight), calc(garrows_settings.scenes_wobbling_time/1000))); , stoptween(view.vlookat, view.hlookat); ); ); delayedcall(panomovement, calc(garrows_settings.scenes_wobbling_updatedelay/1000), panomovement()); </action> <action name="panomovementminmaxvalues"> calc(hlookmin, view.hlookat-0.5*garrows_settings.scenes_wobbling_size); calc(hlookmax, view.hlookat+0.5*garrows_settings.scenes_wobbling_size); calc(vlookmin, view.vlookat-0.5*garrows_settings.scenes_wobbling_size); calc(vlookmax, view.vlookat+0.5*garrows_settings.scenes_wobbling_size); </action> <events name="garrowsevents4" keep="true" onautorotatestart=" set(garrows_settings.autorotateon, true); if (garrows_settings.hide_on_autorotate, set(hotspot[floatingarrow].alphaoriginal, get(hotspot[floatingarrow].alpha)); tween(hotspot[floatingarrow].alpha, 0, 1); for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', set(navpointname, get(hs.name)); set(chvname, get(hs.name)); txtreplace(chvname, '-navpoint', '-chevron'); set(chvshdname, get(hs.name)); txtreplace(chvshdname, '-navpoint', '-chevronshadow'); set(hotspot[get(navpointname)].enabled, false); tween(hotspot[get(navpointname)].alpha, 0, 1); tween(hotspot[get(chvname)].alpha, 0, 1); tween(hotspot[get(chvshdname)].alpha, 0, 1); ); ); ); " /> <events name="garrowsevents4" keep="true" onautorotatestop=" set(garrows_settings.autorotateon, false); if (garrows_settings.hide_on_autorotate, tween(hotspot[floatingarrow].alpha, get(hotspot[floatingarrow].alphaoriginal), 1); for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', set(navpointname, get(hs.name)); set(chvname, get(hs.name)); txtreplace(chvname, '-navpoint', '-chevron'); set(chvshdname, get(hs.name)); txtreplace(chvshdname, '-navpoint', '-chevronshadow'); set(hotspot[get(navpointname)].enabled, true); tween(hotspot[get(navpointname)].alpha, get(garrows_settings.navpoints_alpha), 1); tween(hotspot[get(chvname)].alpha, 1, 1); tween(hotspot[get(chvshdname)].alpha, 1, 1); ); ); ); " /> <action name="showcontextmenu"> set("contextmenu.item[shfa].caption", get(garrows_settings.floating_arrow_text)); set("contextmenu.item[shfa].onclick", "ifnot(garrows_settings.allhotspotshidden, switch(garrows_settings.show_floatingarrow); switch(garrows_settings.show_floatingarrow_global); if(garrows_settings.show_floatingarrow_global, mousemove(), hidefloatingarrow(); ); );"); set("contextmenu.item[shfa].separator", "true"); set("contextmenu.item[shca].caption", get(garrows_settings.chevron_arrows_text)); set("contextmenu.item[shca].onclick", "ifnot(garrows_settings.allhotspotshidden, switch(garrows_settings.show_chevrons); switch(garrows_settings.show_chevrons_global); if(garrows_settings.show_chevrons_global, addchevrons(), removechevrons(); ); );"); set("contextmenu.item[shnh].caption", get(garrows_settings.navigation_hotspots_text)); set("contextmenu.item[shnh].onclick", "ifnot(garrows_settings.allhotspotshidden, switch(garrows_settings.show_navpoints); switch(garrows_settings.show_navpoints_global); if(garrows_settings.show_navpoints_global, shownavpoints(), hidenavpoints(); ); );"); set("contextmenu.item[ahfa].caption", get(garrows_settings.floating_arrow_autohide_text)); set("contextmenu.item[ahfa].onclick", "switch(garrows_settings.floatingarrow_autohide);"); set("contextmenu.item[agan].caption", 'About GArrows navigation'); set("contextmenu.item[agan].onclick", "openurl(http://www.robostitcher.com/Garrows, _blank)"); set("contextmenu.item[agan].separator", "true"); </action> <action name="garrowclick"> if(garrows_settings.floatingarrow_flyaway AND hsnear, stopdelayedcall(mousemovecall); tween(hotspot[floatingarrow].atv,0,0.2); tween(hotspot[floatingarrow].scale,0,0.2); ); callwith(hsnear, onclick); </action> <action name="putonground"> for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', set(hotspot[get(i)].atv, get(garrows_settings.navpoints_atv)); ); ); </action> <action name="addchevrons"> ifnot(garrows_settings.allhotspotshidden, set(garrows_settings.show_chevrons_global, true); addlayer(connections); set(j,0); for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', set(layer[connections].connection[get(j)].name, get(hs.name)); txtreplace(layer[connections].connection[get(j)].name, '-navpoint', '-chevron'); set(layer[connections].connection[get(j)].hdir, get(hs.ath)); set(layer[connections].connection[get(j)].vdir, get(hs.vdir)); set(layer[connections].connection[get(j)].shape, get(garrows_settings.chevron_style)); set(layer[connections].connection[get(j)].shadowstyle, 'chevron-shadow'); set(layer[connections].connection[get(j)].arrowstyle, 'chevron'); set(layer[connections].connection[get(j)].onclick, get(hs.onclick)); txtadd(layer[connections].connection[get(j)].onout, 'set(fillcolor,get(garrows_settings.chevrons_color)); set(bordercolor,get(garrows_settings.chevrons_bordercolor)); set(borderwidth,get(garrows_settings.chevrons_borderwidth));', get(hs.onoutorig)); txtadd(layer[connections].connection[get(j)].onhover, 'set(fillcolor,get(garrows_settings.chevrons_coloronhover)); set(bordercolor,get(garrows_settings.chevrons_bordercoloronhover)); set(borderwidth,get(garrows_settings.chevrons_borderwidth));', get(hs.onhoverorig)); set(layer[connections].connection[get(j)].tooltip, get(hs.tooltip)); inc(j); ); ); set(allowarrows, 1); updateConnections(); ); </action> <action name="removechevrons"> for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', set(chvname, get(hs.name)); txtreplace(chvname, '-navpoint', '-chevron'); set(chvshdname, get(hs.name)); txtreplace(chvshdname, '-navpoint', '-chevronshadow'); removehotspot(get(chvname)); removehotspot(get(chvshdname)); ); ); removelayer(connections, true); set(allowarrows, 0); updateConnections(); </action> <action name="shownavpoints"> ifnot(garrows_settings.allhotspotshidden, for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', set(hotspot[get(i)].visible, true); ); ); ); </action> <action name="hidenavpoints"> for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', set(hotspot[get(i)].visible, false); ); ); </action> <action name="mousemove"> if(!garrows_settings.allhotspotshidden AND !garrows_settings.autorotateon, screentosphere(mouse.x, mouse.y, mth, mtv); if(garrows_settings.floatingarrow_position == 'bottom', set(mtv, calc(view.vlookat+garrows_settings.floatingarrow_atv)); set(mth, get(view.hlookat)); ); if(garrows_settings.floatingarrow_position == 'fixed', set(mtv, get(garrows_settings.floatingarrow_atv)); set(mth, get(view.hlookat)); ); set(hotspot[floatingarrow].ath, get(mth)); set(hotspot[floatingarrow].atv, get(mtv)); sub(a, -90, mtv); set(hotspot[floatingarrow].rx, get(a)); if(mtv LE 0, set(hotspot[floatingarrow].visible, false);  , set(hotspot[floatingarrow].visible, true); ); mul(hotspot[floatingarrow].scale, mtv, 0.03); mul(hotspot[floatingarrow].scale, get(garrows_settings.floatingarrow_scale)); mul(hotspot[floatingarrow].scale, 0.1); delete(hsnear); for(set(i,0), i LT hotspot.count, inc(i), copy(hs,hotspot[get(i)]); if (hs.style == 'skin_hotspotstyle_navigate', hs.getcenter(hs_h, hs_v); getlooktodistance(dist, hs_h, hs_v, hotspot[floatingarrow].ath, hotspot[floatingarrow].atv); if((dist LE garrows_settings.floatingarrow_sens) AND (hsnear === null), copy(hsnear, hs); ); ); ); if(hsnear, txtadd(hotspot[floatingarrow].url, get(garrows_settings.plugin_directory), '/chevron.png'); set(hotspot[floatingarrow].visible, true); if(garrows_settings.floatingarrow_autohide AND !garrows_settings.autorotateon, tween(hotspot[floatingarrow].alpha, get(garrows_settings.floatingarrow_alpha), 0.2); ); if(garrows_settings.floatingarrow_position != 'mouse', set(hotspot[floatingarrow].onclick, 'garrowclick();'); set(hotspot[floatingarrow].enabled, true); set(hotspot[floatingarrow].tooltip, get(hsnear.tooltip)); set(hotspot[floatingarrow].onhover, get(hsnear.onhoverorig0)); set(hotspot[floatingarrow].onout, get(hsnear.onoutorig0)); ); , if(garrows_settings.floatingarrow_autohide, tween(hotspot[floatingarrow].alpha, 0, 0.2, default, set(hotspot[floatingarrow].visible, false); ); , set(hotspot[floatingarrow].alpha, get(garrows_settings.floatingarrow_alpha)); txtadd(hotspot[floatingarrow].url, get(garrows_settings.plugin_directory), '/chevron0.png'); ); if(floatingarrow_position != 'mouse', set(hotspot[floatingarrow].enabled, false); ); ); ); delayedcall(mousemovecall, calc(garrows_settings.floatingarrow_updatedelay/1000), mousemove()); </action> <action name="hidefloatingarrow"> set(hotspot[floatingarrow].visible, false); stopdelayedcall(mousemovecall); </action> <include url="arrows.xml" /> <layer name="lineshape" keep="true"> <arrow> <point name="p0" x="0" y="10000"/> <point name="p1" x="-4" y="10"/> <point name="p2" x="0" y="14"/> <point name="p3" x="4" y="10"/> <center dist="180" shadowdrop="0.75"> <functionv> <point name="p0" vlookat="-90" posv="90" /> <point name="p1" vlookat="0" posv="get:garrows_settings.chevrons_position" /> <point name="p2" vlookat="90" posv="90" /> </functionv> </center> </arrow> </layer> <layer name="arrowshape" keep="true"> <arrow> <point name="p0" x="0" y="45"/> <point name="p1" x="-10" y="10"/> <point name="p2" x="0" y="18"/> <point name="p3" x="10" y="10"/> <center dist="180" shadowdrop="0.75"> <functionv> <point name="p0" vlookat="-90" posv="90" /> <point name="p1" vlookat="0" posv="get:garrows_settings.chevrons_position" /> <point name="p2" vlookat="90" posv="90" /> </functionv> </center> </arrow> </layer> <layer name="chevronshape" keep="true"> <arrow> <point name="p0" x="0" y="60" /> <point name="p1" x="-15" y="47" /> <point name="p2" x="-15" y="37" /> <point name="p3" x="0" y="50" /> <point name="p4" x="15" y="37" /> <point name="p5" x="15" y="47" /> <center dist="180" shadowdrop="0.75"> <functionv> <point name="p0" vlookat="-90" posv="90" /> <point name="p1" vlookat="0" posv="get:garrows_settings.chevrons_position" /> <point name="p2" vlookat="90" posv="90" /> </functionv> </center> </arrow> </layer> <layer name="chevronmediumshape" keep="true"> <arrow> <point name="p0" x="0" y="63" /> <point name="p1" x="-20" y="47" /> <point name="p2" x="-20" y="32" /> <point name="p3" x="0" y="47" /> <point name="p4" x="20" y="32" /> <point name="p5" x="20" y="47" /> <center dist="180" shadowdrop="0.75"> <functionv> <point name="p0" vlookat="-90" posv="90" /> <point name="p1" vlookat="0" posv="get:garrows_settings.chevrons_position" /> <point name="p2" vlookat="90" posv="90" /> </functionv> </center> </arrow> </layer> <layer name="chevronbigshape" keep="true"> <arrow> <point name="p0" x="0" y="65" /> <point name="p1" x="-25" y="47" /> <point name="p2" x="-25" y="27" /> <point name="p3" x="0" y="45" /> <point name="p4" x="25" y="27" /> <point name="p5" x="25" y="47" /> <center dist="180" shadowdrop="0.75"> <functionv> <point name="p0" vlookat="-90" posv="90" /> <point name="p1" vlookat="0" posv="get:garrows_settings.chevrons_position" /> <point name="p2" vlookat="90" posv="90" /> </functionv> </center> </arrow> </layer> <style name="chevron" fillcolor="get:garrows_settings.chevrons_color" fillalpha="get:garrows_settings.chevrons_alpha" bordercolor="get:garrows_settings.chevrons_bordercolor" borderalpha="get:garrows_settings.chevronsborder_alpha" borderwidth="get:garrows_settings.chevrons_borderwidth" zorder="50" keep="false" capture="get:garrows_settings.chevrons_capture"> </style> <style name="chevron-shadow" fillcolor="get:garrows_settings.chevrons_shadow_color" fillalpha="get:garrows_settings.chevrons_shadow_alpha" bordercolor="get:garrows_settings.chevrons_shadow_bordercolor" borderalpha="get:garrows_settings.chevrons_shadow_border_alpha" borderwidth="get:garrows_settings.chevrons_shadow_borderwidth" zorder="0" keep="false" capture="get:garrows_settings.chevrons_capture"> </style> <layer name="wrongpassword" type="container" align="lefttop" width="100%" height="100%" bgcolor="0x000000" bgalpha="0.6" keep="true" visible="false" zorder="10000000" bgcapture="true" onclick="checkpassword()" /> <hotspot name="floatingarrow" zorder="get:garrows_settings.floatingarrow_zorder" url="chevron0.png" width="150" height="150" distorted="true" ath="0" atv="45" keep="true" alpha="get:garrows_settings.floatingarrow_alpha" enabled="false" visible="false" /> <style name="skin_hotspotstyle_navigate" url="hotspot.png" edge="top" oy="0" alpha="0" distorted="true" visible="false" onloaded="if(garrows_settings.navpoints_putonground, putonground();); div(s, get(atv), 30); mul(scale, s, 1.3); mul(s, s, 0.8); mul(height, height, s); delayedcall(0.5, tween(alpha,get(garrows_settings.navpoints_alpha),0.5););"> </style></krpano>